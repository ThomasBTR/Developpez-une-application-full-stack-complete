openapi: 3.0.3
info:
  title: MDD Application API
  version: 1.0.0
  description: |-
      This API for MDD Application allows users to access and modify their profile and subscriptions.
      This API is used to connect MDD front and back End applications.
      Some useful links:
      - [The MDD Application repository](https://github.com/ThomasBTR/Developpez-une-application-full-stack-complete)
    
  termsOfService: https://mdd-application.com/terms/
  contact:
      email: thomas.berthomier.dev@gmail.com
  license:
      name: GNU General Public License v3.0
      url: https://spdx.org/licenses/GPL-3.0-or-later.html

servers:
  - url: http://localhost:8080/api
paths:
  /users:
    get:
      tags:
        - Users
      summary: Retrieve user profile
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileList'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/{id}:
    get:
      tags:
        - User
      summary: Retrieve user profile by ID
      parameters:
        - in: path
          name: id
          description: ID of the user to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - User
      summary: Update user profile
      parameters:
        - in: path
          name: id
          description: ID of the user to retrieve
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid user profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Log in user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '401':
          description: Invalid login credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpResponse'
        '400':
          description: Invalid user registration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /logout:
    post:
      tags:
        - Authentication
      summary: Log out user
      responses:
        '204':
          description: User logged out successfully
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /themes:
    get:
      tags:
        - Theme
      summary: Retrieve list of all available themes
      responses:
        '200':
          description: List of themes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeListResponse'
  /themes/{theme_id}/subscribe/{user_id}:
    post:
      tags:
        - Theme
      summary: Subscribe to a theme
      parameters:
        - in: path
          name: theme_id
          description: ID of the theme to subscribe to
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: user_id
          description: ID of the user subscribing
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Subscribed to theme successfully
        '400':
          description: Invalid subscription request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
          - Theme
      summary: Unsubscribe from a theme
      parameters:
        - in: path
          name: theme_id
          description: ID of the theme to unsubscribe from
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: user_id
          description: ID of the user unsubscribing
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Unsubscribed from theme successfully
        '400':
          description: Invalid theme ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /articles:
    get:
      tags:
        - Article
      summary: Retrieve list of all articles
      responses:
        '200':
          description: List of articles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleListResponse'
    post:
      tags:
        - Article
      summary: Create a new article
      operationId: createArticle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticlePostRequest'
      responses:
        '201':
          description: Article created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleDto'
        '400':
          description: Invalid article data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /articles/{article_id}:
    get:
        tags:
            - Article
        summary: Retrieve article by ID
        parameters:
          - in: path
            name: article_id
            description: ID of the article to retrieve
            required: true
            schema:
                type: integer
                format: int64
        responses:
          '200':
            description: Article retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ArticleDto'
  /articles/{id}/comment:
    post:
      tags:
        - Article
      summary: Comment on an article
      parameters:
        - in: path
          name: id
          description: ID of the article to comment on
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
      responses:
        '201':
          description: Commented on article successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
        '400':
          description: Invalid comment data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    CommentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        content:
          type: string
        date:
          type: string
          format: date-time
    ArticleListResponse:
      type: array
      items:
        $ref: '#/components/schemas/ArticleDto'
    ArticleDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          title:
            type: string
          content:
            type: string
          theme:
            type: string
          date:
            type: string
            format: date-time
          author:
            type: string
          comments:
                type: array
                items:
                    $ref: '#/components/schemas/CommentDto'
    ArticlePostRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        theme:
          type: string
        author:
          type: string
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        password:
          type: string
    SignUpRequest:
      type: object
      properties:
          username:
            type: string
            example: "Robert"
            x-field-extra-annotation: '@javax.validation.constraints.NotNull'
          email:
            type: string
            example: "robert@domain.com"
            x-field-extra-annotation: '@javax.validation.constraints.NotNull'
          password:
            type: string
            example: "Password!2023"
            x-field-extra-annotation: '@javax.validation.constraints.NotNull'
            pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
    SignUpResponse:
        type: object
        properties:
            message:
                type: string
                example: "Signup successful"
    UserUpdate:
      type: object
      properties:
        username:
          type: string
          example: "Roberto"
        email:
          type: string
          example: "roberto@domain.com"
    UserProfileList:
      type: array
      items:
        $ref: '#/components/schemas/UserProfile'
    UserProfile:
      type: object
      properties:
          id:
            type: integer
            format: int64
            example: "0"
          username:
            type: string
            example: "Robert"
          email:
            type: string
            example: "robert@domain.com"
          password:
            type: string
            example: "Robert!2023"
          subscriptions:
            type: array
            items:
                $ref: '#/components/schemas/ThemeUserInfo'
    UserUpdateRequest:
      type: object
      properties:
        username:
          type: string
          example: "Username"
        email:
          type: string
          example: "user@domain.com"
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: "username"
          x-field-extra-annotation: '@javax.validation.constraints.NotNull'
        password:
          type: string
          example: "passworD!2023"
          x-field-extra-annotation: '@javax.validation.constraints.NotNull'
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
    JwtResponse:
      type: object
      properties:
          jwt:
            type: string
            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          type:
            type: string
            example: "JWT"
          id:
            type: integer
            format: int64
            example: 0
          username:
            type: string
            example: "username"
          email:
            type: string
            example: "user@domain.com"
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
         type: string
         example: "Error from server"
    Theme:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 0
        title:
          type: string
          example: "Java"
        description:
          type: string
          example: "This is a java description example"
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserThemeInfo'
    ThemeUserInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 0
        title:
          type: string
          example: "Java"
        description:
          type: string
          example: "This is a theme description exemple"
    UserThemeInfo:
      type: object
      properties:
          id:
            type: integer
            format: int64
            example: 0
          username:
            type: string
            example: "username"
          email:
            type: string
            example: "user@domain.com"
    ThemeListResponse:
      type: array
      items:
        $ref: '#/components/schemas/Theme'
    SubscriptionRequest:
      type: object
      properties:
        themeId:
          type: integer
          format: int64
          example: 0